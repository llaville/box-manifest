<?php declare(strict_types=1);
/**
 * This file is part of the BoxManifest package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Bartlett\BoxManifest\Helper;

use Fidry\Console\IO;

use KevinGH\Box\Configuration\NoConfigurationFound;
use KevinGH\Box\Console\ConfigurationLocator;

use KevinGH\Box\Json\Json;

use Seld\JsonLint\ParsingException;

use stdClass;
use function array_merge;

/**
 * @author Laurent Laville
 * @since Release 4.1.0
 */
final class BoxConfigurationHelper
{
    public const NO_CONFIG_OPTION = 'no-config';
    public const CONFIG_PARAM = 'config';

    private stdClass $rawConfig;

    private ?string $configPath = null;

    /**
     * @throws ParsingException
     */
    public function __construct(
        IO $io,
        ?string $boxManifestVersion = null,
        Json $json = new Json()
    ) {
        $assocConfig = [];

        // @link https://box-project.github.io/box/configuration/#main-main
        $assocConfig['main'] = null;

        // @link https://box-project.github.io/box/configuration/#alias-alias
        $assocConfig['alias'] = 'box-auto-generated-alias.phar';

        // By default, the Box Manifest banner is used.
        // @link https://box-project.github.io/box/configuration/#banner-banner
        $assocConfig['banner'] = 'Generated by BOX Manifest ' . ($boxManifestVersion ?? '@dev') . "\n\n"
            . '@link https://github.com/llaville/box-manifest'
        ;
        // By default, this line is used
        // @link https://box-project.github.io/box/configuration/#shebang-shebang
        $assocConfig['shebang'] = '#!/usr/bin/env php';

        // @link https://box-project.github.io/box/configuration/#intercept-intercept
        $assocConfig['intercept'] = false;

        // @link https://box-project.github.io/box/configuration/#check-requirements-check-requirements
        $assocConfig['checkRequirements'] = true;

        // @link https://box-project.github.io/box/configuration/#map-map
        $assocConfig['map'] = [];

        if (false === $io->getTypedOption(self::NO_CONFIG_OPTION)->asBoolean()) {
            $this->configPath = $this->getConfigPath($io);
            if (null !== $this->configPath) {
                /** @var array<string, mixed> $fileConfig */
                $fileConfig = $json->decodeFile($this->configPath, true);
                $assocConfig = array_merge($assocConfig, $fileConfig);
            }
        }

        $this->rawConfig = (object) $assocConfig;
    }

    public function dump(): stdClass
    {
        return $this->rawConfig;
    }

    public function getConfigurationFile(): ?string
    {
        return $this->configPath;
    }

    public function getMainScript(): ?string
    {
        return $this->rawConfig->main ?: null;
    }

    public function getAlias(): string
    {
        return $this->rawConfig->alias;
    }

    public function getBanner(): string
    {
        return $this->rawConfig->banner ?: '';
    }

    public function getShebang(): string
    {
        return $this->rawConfig->shebang ?: '';
    }

    /**
     * @return array<int, array<string, string>>
     */
    public function getMap(): array
    {
        return $this->rawConfig->map;
    }

    public function withInterceptFileFunctions(): bool
    {
        return $this->rawConfig->intercept;
    }

    public function withCheckRequirements(): bool
    {
        return $this->rawConfig->checkRequirements;
    }

    private function getConfigPath(IO $io): ?string
    {
        try {
            /** @var string $configPath */
            $configPath = $io->getInput()->getOption(self::CONFIG_PARAM);
            $configPath ??= ConfigurationLocator::findDefaultPath();
        } catch (NoConfigurationFound) {
            return null;
        }
        return $configPath;
    }
}
